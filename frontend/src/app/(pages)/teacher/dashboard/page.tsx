// src/app/(pages)/teacher/dashboard/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { Card, Typography, Row, Col, Button, Badge, Progress, List, Avatar, Tag, message } from 'antd';
import { 
  BookOutlined, 
  UserOutlined, 
  CheckCircleOutlined,
  ClockCircleOutlined,
  TrophyOutlined,
  EyeOutlined,
  CalendarOutlined,
  FileTextOutlined,
  RiseOutlined,
  MessageOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
import '../../admin/dashboard/dashboard.css';

dayjs.extend(relativeTime);

const { Text } = Typography;

// Interfaces
interface Teacher {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  profile_image_url?: string;
  specializations: string[];
  experience: number;
}

interface Course {
  id: string;
  courseName: string;
  enrolledStudents: number;
  totalHours: number;
  status: 'active' | 'draft' | 'completed';
  category: string;
  startDate: string;
  endDate?: string;
}

interface Student {
  id: string;
  firstName: string;
  lastName: string;
  courseId: string;
  progress: number;
  lastActivity: string;
  status: 'active' | 'completed' | 'inactive';
  avatar?: string;
}

interface Assignment {
  id: string;
  title: string;
  courseId: string;
  courseName: string;
  dueDate: string;
  submitted: number;
  total: number;
  status: 'pending' | 'grading' | 'completed';
}

interface RecentActivity {
  id: string;
  type: 'enrollment' | 'completion' | 'question' | 'assignment';
  title: string;
  description: string;
  time: string;
  studentName?: string;
  courseName?: string;
}

// Mock data
const mockTeacher: Teacher = {
  id: 'teacher-001',
  firstName: '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏°‡∏®‡∏£‡∏µ',
  lastName: '‡πÉ‡∏à‡∏î‡∏µ',
  email: 'teacher@example.com',
  profile_image_url: 'https://placehold.co/100x100/5d4037/ffffff?text=T',
  specializations: ['‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢', '‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏ö‡∏≥‡∏ö‡∏±‡∏î', '‡∏≠‡πÇ‡∏£‡∏°‡∏≤‡πÄ‡∏ò‡∏≠‡∏£‡∏≤‡∏õ‡∏µ'],
  experience: 15
};

const mockCourses: Course[] = [
  {
    id: 'course-1',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
    enrolledStudents: 25,
    totalHours: 30,
    status: 'active',
    category: '‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢',
    startDate: '2024-06-01',
    endDate: '2024-08-31'
  },
  {
    id: 'course-2',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤',
    enrolledStudents: 18,
    totalHours: 25,
    status: 'active',
    category: '‡∏™‡∏õ‡∏≤‡πÄ‡∏ò‡∏≠‡∏£‡∏≤‡∏õ‡∏µ',
    startDate: '2024-07-01',
    endDate: '2024-09-30'
  },
  {
    id: 'course-3',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    enrolledStudents: 12,
    totalHours: 40,
    status: 'draft',
    category: '‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏ö‡∏≥‡∏ö‡∏±‡∏î',
    startDate: '2024-09-01'
  }
];

const mockStudents: Student[] = [
  {
    id: 'std-001',
    firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
    lastName: '‡∏î‡∏µ‡πÉ‡∏à',
    courseId: 'course-1',
    progress: 85,
    lastActivity: dayjs().subtract(2, 'hour').toISOString(),
    status: 'active',
    avatar: 'https://placehold.co/40x40/1890ff/ffffff?text=‡∏™'
  },
  {
    id: 'std-002',
    firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
    lastName: '‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
    courseId: 'course-1',
    progress: 92,
    lastActivity: dayjs().subtract(4, 'hour').toISOString(),
    status: 'active',
    avatar: 'https://placehold.co/40x40/52c41a/ffffff?text=‡∏™'
  },
  {
    id: 'std-003',
    firstName: '‡∏ß‡∏¥‡∏ó‡∏¢‡πå',
    lastName: '‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
    courseId: 'course-2',
    progress: 100,
    lastActivity: dayjs().subtract(1, 'day').toISOString(),
    status: 'completed',
    avatar: 'https://placehold.co/40x40/faad14/ffffff?text=‡∏ß'
  }
];

const mockAssignments: Assignment[] = [
  {
    id: 'assign-001',
    title: '‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1',
    courseId: 'course-1',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
    dueDate: dayjs().add(3, 'day').toISOString(),
    submitted: 18,
    total: 25,
    status: 'pending'
  },
  {
    id: 'assign-002',
    title: '‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤',
    courseId: 'course-2',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤',
    dueDate: dayjs().add(1, 'week').toISOString(),
    submitted: 12,
    total: 18,
    status: 'grading'
  }
];

const mockRecentActivities: RecentActivity[] = [
  {
    id: 'act-001',
    type: 'completion',
    title: '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    description: '‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô "‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏´‡∏≠‡∏°‡∏£‡∏∞‡πÄ‡∏´‡∏¢"',
    time: dayjs().subtract(30, 'minute').toISOString(),
    studentName: '‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤'
  },
  {
    id: 'act-002',
    type: 'question',
    title: '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
    description: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏î‡∏µ‡πÉ‡∏à ‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    time: dayjs().subtract(2, 'hour').toISOString(),
    studentName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏î‡∏µ‡πÉ‡∏à',
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡πÅ‡∏ú‡∏ô‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô'
  },
  {
    id: 'act-003',
    type: 'assignment',
    title: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à',
    description: '‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤ 5 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
    time: dayjs().subtract(4, 'hour').toISOString(),
    courseName: '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏ß‡∏î‡∏≠‡πÇ‡∏£‡∏°‡πà‡∏≤'
  }
];

export default function TeacherDashboardPage() {
  const [teacher, setTeacher] = useState<Teacher | null>(null);
  const [courses, setCourses] = useState<Course[]>([]);
  const [students, setStudents] = useState<Student[]>([]);
  const [assignments, setAssignments] = useState<Assignment[]>([]);
  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);

  useEffect(() => {
    // Simulate loading data
    setTeacher(mockTeacher);
    setCourses(mockCourses);
    setStudents(mockStudents);
    setAssignments(mockAssignments);
    setRecentActivities(mockRecentActivities);
  }, []);

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'completion': return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
      case 'question': return <MessageOutlined style={{ color: '#1890ff' }} />;
      case 'assignment': return <FileTextOutlined style={{ color: '#faad14' }} />;
      case 'enrollment': return <UserOutlined style={{ color: '#722ed1' }} />;
      default: return <ClockCircleOutlined />;
    }
  };

  const handleViewCourse = (courseId: string) => {
    message.info(`‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£: ${courseId}`);
    console.log('View course:', courseId);
  };

  const handleViewStudent = (studentId: string) => {
    message.info(`‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${studentId}`);
    console.log('View student:', studentId);
  };

  const handleGradeAssignment = (assignmentId: string) => {
    message.info(`‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô: ${assignmentId}`);
    console.log('Grade assignment:', assignmentId);
  };

  const totalStudents = courses.reduce((acc, course) => acc + course.enrolledStudents, 0);
  const activeCourses = courses.filter(c => c.status === 'active').length;
  const completedStudents = students.filter(s => s.status === 'completed').length;
  const pendingAssignments = assignments.filter(a => a.status === 'pending' || a.status === 'grading').length;

  return (
    <div className="dashboard-container">
      {/* Page Header */}
      <div className="dashboard-header">
        <div>
          <h1 className="dashboard-title">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå</h1>
          <p className="dashboard-subtitle">
            ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ - ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {teacher?.firstName}! üë®‚Äçüè´
          </p>
        </div>
        <div className="hidden md:block">
          <span className="text-gray-600 text-sm">
            <CalendarOutlined className="text-orange-500 mr-2" />
            {dayjs().format('dddd, LL')}
          </span>
        </div>
      </div>

      {/* Statistics Cards */}
      <Row gutter={[24, 24]} className="stats-row">
        <Col xs={24} sm={6}>
          <Card className="stat-card">
            <div className="stat-content">
              <div className="stat-icon" style={{ color: '#5d4037' }}>
                <BookOutlined />
              </div>
              <div className="stat-details">
                <div className="stat-value" style={{ color: '#5d4037' }}>
                  {activeCourses}
                </div>
                <div className="stat-title">‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô</div>
                <div className="stat-trend">
                  <RiseOutlined className="trend-up" />
                  <span className="trend-up">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {courses.length} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£</span>
                </div>
              </div>
            </div>
          </Card>
        </Col>
        
        <Col xs={24} sm={6}>
          <Card className="stat-card">
            <div className="stat-content">
              <div className="stat-icon" style={{ color: '#1890ff' }}>
                <UserOutlined />
              </div>
              <div className="stat-details">
                <div className="stat-value" style={{ color: '#1890ff' }}>
                  {totalStudents}
                </div>
                <div className="stat-title">‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                <div className="stat-trend">
                  <span className="trend-up">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏¢‡∏π‡πà</span>
                </div>
              </div>
            </div>
          </Card>
        </Col>

        <Col xs={24} sm={6}>
          <Card className="stat-card">
            <div className="stat-content">
              <div className="stat-icon" style={{ color: '#52c41a' }}>
                <TrophyOutlined />
              </div>
              <div className="stat-details">
                <div className="stat-value" style={{ color: '#52c41a' }}>
                  {completedStudents}
                </div>
                <div className="stat-title">‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</div>
                <div className="stat-trend">
                  <span className="trend-up">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</span>
                </div>
              </div>
            </div>
          </Card>
        </Col>

        <Col xs={24} sm={6}>
          <Card className="stat-card">
            <div className="stat-content">
              <div className="stat-icon" style={{ color: '#faad14' }}>
                <FileTextOutlined />
              </div>
              <div className="stat-details">
                <div className="stat-value" style={{ color: '#faad14' }}>
                  {pendingAssignments}
                </div>
                <div className="stat-title">‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à</div>
                <div className="stat-trend">
                  <span className="trend-up">‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>
                </div>
              </div>
            </div>
          </Card>
        </Col>
      </Row>

      <Row gutter={[24, 24]} className="content-row">
        {/* My Courses */}
        <Col xs={24} lg={12}>
          <Card
            title="‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô"
            className="content-card"
            extra={
              <Button type="link" className="card-action-btn">
                ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
            }
          >
            <div className="course-progress-list">
              {courses.slice(0, 3).map(course => (
                <div key={course.id} className="course-progress-item">
                  <div className="course-header">
                    <div className="course-info">
                      <div className="course-name">{course.courseName}</div>
                      <div className="course-meta">
                        <Tag color={course.status === 'active' ? 'green' : course.status === 'draft' ? 'orange' : 'blue'}>
                          {course.status === 'active' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏ô' : course.status === 'draft' ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'}
                        </Tag>
                        <span className="course-students">{course.enrolledStudents} ‡∏Ñ‡∏ô</span>
                      </div>
                    </div>
                    <Button 
                      type="primary" 
                      size="small"
                      className="dashboard-action-btn"
                      style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
                      icon={<EyeOutlined />}
                      onClick={() => handleViewCourse(course.id)}
                    >
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </Button>
                  </div>
                  <Progress 
                    percent={Math.round((course.enrolledStudents / 30) * 100)} 
                    strokeColor="#1890ff"
                    trailColor="#f5f5f5"
                    size={8}
                    className="course-progress-bar"
                  />
                </div>
              ))}
            </div>
          </Card>
        </Col>

        {/* Recent Activities */}
        <Col xs={24} lg={12}>
          <Card
            title="‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
            className="content-card"
            extra={
              <Button type="link" className="card-action-btn">
                ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
            }
          >
            <List
              itemLayout="horizontal"
              dataSource={recentActivities.slice(0, 4)}
              className="activity-list"
              renderItem={(item) => (
                <List.Item className="activity-item">
                  <List.Item.Meta
                    avatar={
                      <Avatar style={{ backgroundColor: '#f5f5f5', color: '#5d4037' }}>
                        {getActivityIcon(item.type)}
                      </Avatar>
                    }
                    title={<span className="activity-title">{item.title}</span>}
                    description={
                      <div className="activity-description">
                        <div className="activity-text">{item.description}</div>
                        <div className="activity-time">
                          <ClockCircleOutlined className="time-icon" />
                          {dayjs(item.time).fromNow()}
                        </div>
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
          </Card>
        </Col>

        {/* Student Progress */}
        <Col xs={24} lg={12}>
          <Card
            title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
            className="content-card"
            extra={
              <Button type="link" className="card-action-btn">
                ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
            }
          >
            <List
              itemLayout="horizontal"
              dataSource={students.slice(0, 4)}
              renderItem={(student) => (
                <List.Item
                  className="activity-item"
                  actions={[
                    <Button 
                      key="view" 
                      type="link" 
                      size="small"
                      onClick={() => handleViewStudent(student.id)}
                    >
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </Button>
                  ]}
                >
                  <List.Item.Meta
                    avatar={<Avatar src={student.avatar}>{student.firstName[0]}</Avatar>}
                    title={
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <span>{student.firstName} {student.lastName}</span>
                        <Badge 
                          status={student.status === 'active' ? 'processing' : student.status === 'completed' ? 'success' : 'default'}
                          text={student.status === 'active' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' : student.status === 'completed' ? '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                        />
                      </div>
                    }
                    description={
                      <div>
                        <Progress percent={student.progress} size="small" />
                        <Text type="secondary" style={{ fontSize: 12 }}>
                          ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå: {dayjs(student.lastActivity).fromNow()}
                        </Text>
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
          </Card>
        </Col>

        {/* Assignments to Grade */}
        <Col xs={24} lg={12}>
          <Card
            title="‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
            className="content-card"
            extra={
              <Button type="link" className="card-action-btn">
                ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
            }
          >
            <List
              itemLayout="horizontal"
              dataSource={assignments}
              renderItem={(assignment) => (
                <List.Item
                  className="activity-item"
                  actions={[
                    <Button 
                      key="grade" 
                      type="primary" 
                      size="small"
                      className="dashboard-action-btn"
                      onClick={() => handleGradeAssignment(assignment.id)}
                    >
                      ‡∏ï‡∏£‡∏ß‡∏à‡∏á‡∏≤‡∏ô
                    </Button>
                  ]}
                >
                  <List.Item.Meta
                    avatar={<FileTextOutlined style={{ fontSize: 20, color: '#5d4037' }} />}
                    title={assignment.title}
                    description={
                      <div>
                        <div>{assignment.courseName}</div>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 4 }}>
                          <Text type="secondary">
                            ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß: {assignment.submitted}/{assignment.total}
                          </Text>
                          <Text type="secondary">
                            ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á: {dayjs(assignment.dueDate).format('DD MMM')}
                          </Text>
                        </div>
                        <Progress 
                          percent={Math.round((assignment.submitted / assignment.total) * 100)} 
                          size="small" 
                          strokeColor={assignment.submitted === assignment.total ? '#52c41a' : '#1890ff'}
                        />
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
          </Card>
        </Col>
      </Row>
    </div>
  );
}
